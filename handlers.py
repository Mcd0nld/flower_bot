from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from sqlalchemy.orm import sessionmaker
from database import engine, Customer
from config import OPERATOR_CHAT_ID
import re
from datetime import datetime

# c–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–¥
Session = sessionmaker(bind=engine)

# –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
ASK_NAME, ASK_BIRTHDAY, ASK_PHONE = range(3)

# —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
def is_valid_name(name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã"""
    return bool(re.match(r"^[–ê-–Ø–∞-—èA-Za-z\s-]{2,50}$", name))

def is_valid_date(date_text):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    try:
        datetime.strptime(date_text, "%d.%m.%Y")
        return True
    except ValueError:
        return False

def is_valid_phone(phone):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if not isinstance(phone, str):
        return False
    return bool(re.match(r"^(\+7|8)\d{10}$", phone))

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await update.message.reply_text("üå∏ Fiore per Amore –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å! üå∏")
    await update.message.reply_text("–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å! –ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –±—É–∫–µ—Ç –¥–ª—è –±–ª–∏–∑–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. üéÅüíê")
    await update.message.reply_text("–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
    return ASK_NAME

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    name = update.message.text.strip()
    if not is_valid_name(name):
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è..\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–Ω–æ–≤–∞, –æ–Ω–æ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤.")
        return ASK_NAME
    
    context.user_data["name"] = update.message.text
    await update.message.reply_text(f"‚ú® –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {context.user_data['name']}!")
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±—É–∫–µ—Ç —Å–æ —Å–∫–∏–¥–∫–æ–π!")
    return ASK_BIRTHDAY

async def ask_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    bith_date = update.message.text.strip()
    if not is_valid_date(bith_date):
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞..\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        return ASK_BIRTHDAY

    context.user_data["birth_date"] = update.message.text
    await update.message.reply_text("üéâ –û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.")
    return ASK_PHONE

async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    phone_number = update.message.text.strip()
    if not is_valid_phone(phone_number):
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä..\n\n–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX.")
        return ASK_PHONE

    context.user_data["phone_number"] = update.message.text

    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–¥
    session = Session()
    customer = Customer(
        name = context.user_data["name"],
        birth_date = context.user_data["birth_date"],
        phone_number = context.user_data["phone_number"]
    )
    session.add(customer)
    session.commit()
    session.close()

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    await context.bot.send_message(
        chat_id=OPERATOR_CHAT_ID,
        text=f"üì© –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç!\n–ò–º—è: {context.user_data['name']}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {context.user_data['birth_date']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone_number']}"
    )

    await update.message.reply_text(f"‚úÖ –°–ø–∞—Å–∏–±–æ, {context.user_data['name']}! –¢–µ–ø–µ—Ä—å –≤—ã —Å –Ω–∞–º–∏, –∏ –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º –≤—ã–±—Ä–∞—Ç—å —Å–∞–º—ã–µ –∫—Ä–∞—Å–∏–≤—ã–µ —Ü–≤–µ—Ç—ã! üåπ")
    await update.message.reply_text("üì© –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è - @FiorePerAmore1")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã"""
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω.")
    return ConversationHandler.END


